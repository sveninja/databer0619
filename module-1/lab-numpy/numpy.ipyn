{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Import the NUMPY package under the name np."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "np.random.seed(1) # setting a seed you will always have the same numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Print the NUMPY version and the configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.16.2\n",
      "mkl_info:\n",
      "    libraries = ['mkl_rt', 'pthread']\n",
      "    library_dirs = ['/Users/svenja/anaconda3/lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['/Users/svenja/anaconda3/include']\n",
      "blas_mkl_info:\n",
      "    libraries = ['mkl_rt', 'pthread']\n",
      "    library_dirs = ['/Users/svenja/anaconda3/lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['/Users/svenja/anaconda3/include']\n",
      "blas_opt_info:\n",
      "    libraries = ['mkl_rt', 'pthread']\n",
      "    library_dirs = ['/Users/svenja/anaconda3/lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['/Users/svenja/anaconda3/include']\n",
      "lapack_mkl_info:\n",
      "    libraries = ['mkl_rt', 'pthread']\n",
      "    library_dirs = ['/Users/svenja/anaconda3/lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['/Users/svenja/anaconda3/include']\n",
      "lapack_opt_info:\n",
      "    libraries = ['mkl_rt', 'pthread']\n",
      "    library_dirs = ['/Users/svenja/anaconda3/lib']\n",
      "    define_macros = [('SCIPY_MKL_H', None), ('HAVE_CBLAS', None)]\n",
      "    include_dirs = ['/Users/svenja/anaconda3/include']\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "#np.version.version\n",
    "\n",
    "print(np.__version__)\n",
    "print(np.show_config())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Generate a 2x3x5 3-dimensional array with random values. Assign the array to variable \"a\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[3.96784613e-01 6.18349151e-01 4.95256915e-02 2.46794116e-01\n",
      "   5.13699859e-01]\n",
      "  [3.00562139e-04 7.30556066e-01 3.69786211e-01 9.05266334e-01\n",
      "   1.31161550e-01]\n",
      "  [3.02710763e-01 4.25696688e-01 9.77206797e-01 3.57238525e-01\n",
      "   7.67225848e-01]]\n",
      "\n",
      " [[9.25408167e-01 4.88182734e-01 6.66917690e-01 4.71359982e-02\n",
      "   3.43303116e-01]\n",
      "  [7.69075005e-01 4.22939135e-02 2.77629196e-01 2.11323168e-01\n",
      "   5.28331752e-01]\n",
      "  [2.15748129e-01 8.84337687e-01 3.23506325e-01 7.95555607e-01\n",
      "   4.80392495e-01]]]\n"
     ]
    }
   ],
   "source": [
    "a = np.random.random((2,3,5))\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Challenge: there are at least three easy ways that use numpy to generate random arrays. How many ways can you find?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.18410075, 0.28009647, 0.89340959, 0.581509  , 0.08193895],\n",
       "        [0.18641297, 0.25661379, 0.4060511 , 0.34753591, 0.46098779],\n",
       "        [0.53269466, 0.10188865, 0.68153697, 0.84417133, 0.02341193]],\n",
       "\n",
       "       [[0.98607062, 0.15952429, 0.25795165, 0.11556023, 0.73765153],\n",
       "        [0.00182272, 0.99216755, 0.88756157, 0.44392404, 0.34859047],\n",
       "        [0.17046971, 0.34468222, 0.72303706, 0.01409831, 0.98360598]]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.rand(2,3,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 9.9620591 ,  9.45156546,  8.74007107,  9.6385744 ],\n",
       "       [10.14347567, 11.32479296, 11.02714162, 11.0890761 ],\n",
       "       [ 9.09529374, 10.69005118, 10.50288129, 10.11357669]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.normal(10,1,(3,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Print a."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[3.96784613e-01 6.18349151e-01 4.95256915e-02 2.46794116e-01\n",
      "   5.13699859e-01]\n",
      "  [3.00562139e-04 7.30556066e-01 3.69786211e-01 9.05266334e-01\n",
      "   1.31161550e-01]\n",
      "  [3.02710763e-01 4.25696688e-01 9.77206797e-01 3.57238525e-01\n",
      "   7.67225848e-01]]\n",
      "\n",
      " [[9.25408167e-01 4.88182734e-01 6.66917690e-01 4.71359982e-02\n",
      "   3.43303116e-01]\n",
      "  [7.69075005e-01 4.22939135e-02 2.77629196e-01 2.11323168e-01\n",
      "   5.28331752e-01]\n",
      "  [2.15748129e-01 8.84337687e-01 3.23506325e-01 7.95555607e-01\n",
      "   4.80392495e-01]]]\n"
     ]
    }
   ],
   "source": [
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Create a 5x2x3 3-dimensional array with all values equaling 1. Assign the array to variable \"b\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = np.ones((5,2,3), dtype=int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Print b."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]\n",
      "\n",
      " [[1 1 1]\n",
      "  [1 1 1]]]\n"
     ]
    }
   ],
   "source": [
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. Do a and b have the same size? How do you prove that in Python code?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(a) == len(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. Are you able to add a and b? Why or why not?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a and b cannot be added, they have different sizes in dimensions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. Transpose b so that it has the same structure of a (i.e. become a 2x3x5 array). Assign the transposed array to varialbe \"c\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B (5, 2, 3)\n",
      "C2 (2, 3, 5)\n"
     ]
    }
   ],
   "source": [
    "print(\"B\", b.shape)\n",
    "#print(\"C\", c.shape)\n",
    "\n",
    "c = np.transpose(b, (1,2,0))\n",
    "print(\"C2\", c.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10. Try to add a and c. Now it should work. Assign the sum to varialbe \"d\". But why does it work now?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1.39678461 1.61834915 1.04952569 1.24679412 1.51369986]\n",
      "  [1.00030056 1.73055607 1.36978621 1.90526633 1.13116155]\n",
      "  [1.30271076 1.42569669 1.9772068  1.35723853 1.76722585]]\n",
      "\n",
      " [[1.92540817 1.48818273 1.66691769 1.047136   1.34330312]\n",
      "  [1.769075   1.04229391 1.2776292  1.21132317 1.52833175]\n",
      "  [1.21574813 1.88433769 1.32350633 1.79555561 1.48039249]]]\n"
     ]
    }
   ],
   "source": [
    "d = a + c\n",
    "print(d)\n",
    "\n",
    "# works as arrays have the same shape now"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11. Print a and d. Notice the difference and relation of the two array in terms of the values? Explain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[3.96784613e-01 6.18349151e-01 4.95256915e-02 2.46794116e-01\n",
      "   5.13699859e-01]\n",
      "  [3.00562139e-04 7.30556066e-01 3.69786211e-01 9.05266334e-01\n",
      "   1.31161550e-01]\n",
      "  [3.02710763e-01 4.25696688e-01 9.77206797e-01 3.57238525e-01\n",
      "   7.67225848e-01]]\n",
      "\n",
      " [[9.25408167e-01 4.88182734e-01 6.66917690e-01 4.71359982e-02\n",
      "   3.43303116e-01]\n",
      "  [7.69075005e-01 4.22939135e-02 2.77629196e-01 2.11323168e-01\n",
      "   5.28331752e-01]\n",
      "  [2.15748129e-01 8.84337687e-01 3.23506325e-01 7.95555607e-01\n",
      "   4.80392495e-01]]]\n",
      "[[[1.39678461 1.61834915 1.04952569 1.24679412 1.51369986]\n",
      "  [1.00030056 1.73055607 1.36978621 1.90526633 1.13116155]\n",
      "  [1.30271076 1.42569669 1.9772068  1.35723853 1.76722585]]\n",
      "\n",
      " [[1.92540817 1.48818273 1.66691769 1.047136   1.34330312]\n",
      "  [1.769075   1.04229391 1.2776292  1.21132317 1.52833175]\n",
      "  [1.21574813 1.88433769 1.32350633 1.79555561 1.48039249]]]\n"
     ]
    }
   ],
   "source": [
    "print(a)\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "12. Multiply a and c. Assign the result to e."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1.39678461 1.61834915 1.04952569 1.24679412 1.51369986]\n",
      "  [1.00030056 1.73055607 1.36978621 1.90526633 1.13116155]\n",
      "  [1.30271076 1.42569669 1.9772068  1.35723853 1.76722585]]\n",
      "\n",
      " [[1.92540817 1.48818273 1.66691769 1.047136   1.34330312]\n",
      "  [1.769075   1.04229391 1.2776292  1.21132317 1.52833175]\n",
      "  [1.21574813 1.88433769 1.32350633 1.79555561 1.48039249]]]\n"
     ]
    }
   ],
   "source": [
    "e = a + c\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13. Does e equal to a? Why or why not?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[False False False False False]\n",
      "  [False False False False False]\n",
      "  [False False False False False]]\n",
      "\n",
      " [[False False False False False]\n",
      "  [False False False False False]\n",
      "  [False False False False False]]]\n",
      "(2, 3, 5)\n",
      "(2, 3, 5)\n"
     ]
    }
   ],
   "source": [
    "print(e == a)\n",
    "print(e.shape)\n",
    "print(a.shape)\n",
    "# they are not equal as they contain different nubers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "14. Identify the max, min, and mean values in d. Assign those values to variables \"d_max\", \"d_min\", and \"d_mean\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.9772067973827103\n",
      "1.0003005621393566\n",
      "1.4597147920123765\n"
     ]
    }
   ],
   "source": [
    "d_max = d.max()\n",
    "print(d_max)\n",
    "d_min = d.min()\n",
    "print(d_min)\n",
    "d_mean = d.mean()\n",
    "print(d_mean)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "15. Now we want to label the values in d. First create an empty array \"f\" with the same shape (i.e. 2x3x5) as d using `np.empty`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1.39678461 1.61834915 1.04952569 1.24679412 1.51369986]\n",
      "  [1.00030056 1.73055607 1.36978621 1.90526633 1.13116155]\n",
      "  [1.30271076 1.42569669 1.9772068  1.35723853 1.76722585]]\n",
      "\n",
      " [[1.92540817 1.48818273 1.66691769 1.047136   1.34330312]\n",
      "  [1.769075   1.04229391 1.2776292  1.21132317 1.52833175]\n",
      "  [1.21574813 1.88433769 1.32350633 1.79555561 1.48039249]]]\n"
     ]
    }
   ],
   "source": [
    "f = np.empty([2,3,5])\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "16. Populate the values in f. For each value in d, if it's larger than d_min but smaller than d_mean, assign 25 to the corresponding value in f.\n",
    "If a value in d is larger than d_mean but smaller than d_max, assign 75 to the corresponding value in f.\n",
    "If a value equals to d_mean, assign 50 to the corresponding value in f.\n",
    "Assign 0 to the corresponding value(s) in f for d_min in d.\n",
    "Assign 100 to the corresponding value(s) in f for d_max in d.\n",
    "In the end, f should have only the following values: 0, 25, 50, 75, and 100.\n",
    "Note: you don't have to use Numpy in this question."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[ 25.  75.  25.  25.  75.]\n",
      "  [  0.  75.  25.  75.  25.]\n",
      "  [ 25.  25. 100.  25.  75.]]\n",
      "\n",
      " [[ 75.  75.  75.  25.  25.]\n",
      "  [ 75.  25.  25.  25.  75.]\n",
      "  [ 25.  75.  25.  75.  75.]]]\n"
     ]
    }
   ],
   "source": [
    "# for x in d:\n",
    "#     if x > d_min and x < d_mean:\n",
    "#         f.append(25)\n",
    "#     elif x > d_mean and x < d_max:\n",
    "#         f.append(75)\n",
    "#     elif x == d_mean:\n",
    "#         f.append(50)\n",
    "#     elif x == d_min:\n",
    "#         f.append(0)\n",
    "#     elif x == d_max:\n",
    "#         f.append(100)\n",
    "#     else:\n",
    "#         print(\"error\")\n",
    "        \n",
    "# print(f)\n",
    "\n",
    "f[d>d_min] = 25\n",
    "f[d>d_mean] = 75\n",
    "f[d==d_mean] = 50\n",
    "f[d==d_min] = 0\n",
    "f[d==d_max] = 100\n",
    "\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "17. Print d and f. Do you have your expected f?\n",
    "For instance, if your d is:\n",
    "array([[[1.85836099, 1.67064465, 1.62576044, 1.40243961, 1.88454931],\n",
    "        [1.75354326, 1.69403643, 1.36729252, 1.61415071, 1.12104981],\n",
    "        [1.72201435, 1.1862918 , 1.87078449, 1.7726778 , 1.88180042]],\n",
    "\n",
    "       [[1.44747908, 1.31673383, 1.02000951, 1.52218947, 1.97066381],\n",
    "        [1.79129243, 1.74983003, 1.96028037, 1.85166831, 1.65450881],\n",
    "        [1.18068344, 1.9587381 , 1.00656599, 1.93402165, 1.73514584]]])\n",
    "\n",
    "Your f should be:\n",
    "array([[[ 75.,  75.,  75.,  25.,  75.],\n",
    "        [ 75.,  75.,  25.,  25.,  25.],\n",
    "        [ 75.,  25.,  75.,  75.,  75.]],\n",
    "\n",
    "       [[ 25.,  25.,  25.,  25., 100.],\n",
    "        [ 75.,  75.,  75.,  75.,  75.],\n",
    "        [ 25.,  75.,   0.,  75.,  75.]]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[1.39678461 1.61834915 1.04952569 1.24679412 1.51369986]\n",
      "  [1.00030056 1.73055607 1.36978621 1.90526633 1.13116155]\n",
      "  [1.30271076 1.42569669 1.9772068  1.35723853 1.76722585]]\n",
      "\n",
      " [[1.92540817 1.48818273 1.66691769 1.047136   1.34330312]\n",
      "  [1.769075   1.04229391 1.2776292  1.21132317 1.52833175]\n",
      "  [1.21574813 1.88433769 1.32350633 1.79555561 1.48039249]]]\n",
      "[[[ 25.  75.  25.  25.  75.]\n",
      "  [  0.  75.  25.  75.  25.]\n",
      "  [ 25.  25. 100.  25.  75.]]\n",
      "\n",
      " [[ 75.  75.  75.  25.  25.]\n",
      "  [ 75.  25.  25.  25.  75.]\n",
      "  [ 25.  75.  25.  75.  75.]]]\n"
     ]
    }
   ],
   "source": [
    "print(d)\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "18. Bonus question: instead of using numbers (i.e. 0, 25, 50, 75, and 100), how to use string values \n",
    "(\"A\", \"B\", \"C\", \"D\", and \"E\") to label the array elements? You are expecting the result to be:\n",
    "array([[[ 'D',  'D',  'D',  'B',  'D'],\n",
    "        [ 'D',  'D',  'B',  'B',  'B'],\n",
    "        [ 'D',  'B',  'D',  'D',  'D']],\n",
    "\n",
    "       [[ 'B',  'B',  'B',  'B',  'E'],\n",
    "        [ 'D',  'D',  'D',  'D',  'D'],\n",
    "        [ 'B',  'D',   'A',  'D', 'D']]])\n",
    "Again, you don't need Numpy in this question."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[25.0 75.0 25.0 25.0 75.0]\n",
      "  [0.0 75.0 25.0 75.0 25.0]\n",
      "  [25.0 25.0 100.0 25.0 75.0]]\n",
      "\n",
      " [[75.0 75.0 75.0 25.0 25.0]\n",
      "  [75.0 25.0 25.0 25.0 75.0]\n",
      "  [25.0 75.0 25.0 75.0 75.0]]]\n",
      "[[['B' 'D' 'B' 'B' 'D']\n",
      "  ['A' 'D' 'B' 'D' 'B']\n",
      "  ['B' 'B' 'E' 'B' 'D']]\n",
      "\n",
      " [['D' 'D' 'D' 'B' 'B']\n",
      "  ['D' 'B' 'B' 'B' 'D']\n",
      "  ['B' 'D' 'B' 'D' 'D']]]\n",
      "[[['B' 'D' 'B' 'B' 'D']\n",
      "  ['A' 'D' 'B' 'D' 'B']\n",
      "  ['B' 'B' 'E' 'B' 'D']]\n",
      "\n",
      " [['D' 'D' 'D' 'B' 'B']\n",
      "  ['D' 'B' 'B' 'B' 'D']\n",
      "  ['B' 'D' 'B' 'D' 'D']]]\n"
     ]
    }
   ],
   "source": [
    "f2 = f.astype('object')\n",
    "print(f2)\n",
    "\n",
    "f2[d>d_min] = 'B'\n",
    "f2[d>d_mean] = 'D'\n",
    "f2[d==d_mean] = 'C'\n",
    "f2[d==d_min] = 'A'\n",
    "f2[d==d_max] = 'E'\n",
    "\n",
    "print(f2)\n",
    "\n",
    "# or create new matrix that stores strings\n",
    "\n",
    "m = np.empty((2,3,5), str)\n",
    "\n",
    "m[d>d_min] = 'B'\n",
    "m[d>d_mean] = 'D'\n",
    "m[d==d_mean] = 'C'\n",
    "m[d==d_min] = 'A'\n",
    "m[d==d_max] = 'E'\n",
    "\n",
    "print(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
